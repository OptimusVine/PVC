{
  "name": "passport-asana",
  "version": "0.0.1",
  "description": "Asana API OAuth2 authentication strategy for Passport",
  "main": "./lib/passport-asana",
  "dependencies": {
    "pkginfo": "0.2.x",
    "passport-oauth": ">= 0.1.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/nickls/passport-asana.git"
  },
  "bugs": {
    "url": "https://github.com/nickls/passport-asana/issues"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "keywords": [
    "passport",
    "asana",
    "api",
    "auth",
    "oauth",
    "authentication",
    "identity"
  ],
  "author": {
    "name": "Nick Lane-Smith",
    "email": "nlanesmith@gmail.com"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "readme": "passport-asana\n==============\n\n[Passport](https://github.com/jaredhanson/passport) Authentication Strategy for [Asana's API](http://developer.asana.com/) using OAuth2\n\n<p align='center'>\n<img src=\"https://github.com/nickls/passport-asana/raw/master/examples/login/public/example.png\" height=\"400px\" />\n</p>\n\n\n## Installation\n\n    $ npm install passport-asana\n\n## Usage\n\n#### Authorization (the much more likely usecase)\n\n\n#### Authentication Configuration Strategy\n\nThe Asana authentication strategy authenticates users using an Asana account and\nOAuth tokens.  The strategy requires a `verify` callback, which accepts these\ncredentials and calls `done` providing a user, as well as `options` specifying a\nclient id , client secret, and callback URL.\n\n    passport.use(new AsanaStrategy({\n        clientID: '1234567890123',\n        clientSecret: '5ddf23ae77cbe6bff02430f8f37c4900'\n        callbackURL: 'https://www.example.com/auth/asana/callback'\n      },\n      function(accessToken, refreshToken, profile, done) {\n        User.findOrCreate({ userId: profile.id }, function (err, user) {\n          return done(err, user);\n        });\n      }\n    ));\n\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'Asana'` strategy, to\nauthenticate requests.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n    app.get('/auth/asana',\n      passport.authenticate('Asana'),\n      function(req, res){\n        // The request will be redirected to asana.com for authentication, so this\n        // function will not be called.\n      });\n\n    app.get('/auth/asana/callback',\n      passport.authenticate('Asana', { failureRedirect: '/login' }),\n      function(req, res) {\n        // Successful authentication, redirect home.\n        res.redirect('/');\n      });\n\n## Credits\n  - [Nick Lane-Smith](https://github.com/nickls)\n\n## Thanks\n  - [Jared Hanson](https://github.com/jaredhanson)",
  "_id": "passport-asana@0.0.1",
  "dist": {
    "shasum": "24ba4d4f3def587bb973a0191e8288a4a3d55429",
    "tarball": "http://registry.npmjs.org/passport-asana/-/passport-asana-0.0.1.tgz"
  },
  "_npmVersion": "1.1.66",
  "_npmUser": {
    "name": "nickls",
    "email": "nlanesmith@gmail.com"
  },
  "maintainers": [
    {
      "name": "nickls",
      "email": "nlanesmith@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "24ba4d4f3def587bb973a0191e8288a4a3d55429",
  "_resolved": "https://registry.npmjs.org/passport-asana/-/passport-asana-0.0.1.tgz",
  "_from": "passport-asana@*"
}
